<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mikeLeft</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//global Name = "Mike"; 

//gravity_direction = 270;
//gravity = max(gravity, 0.02);
// for collisions
x = min(x,room_width-16);
x = max(x,+16);
y = max(y,-128);



if !place_free(x, y + 1) {
    vspeed = -11;
    audio_play_sound(snd_bounce, 1, false);
}

//when not colliding with object; i.e. in the air
if place_free (x, y + 1) {
    gravity = 0.5;
    //where he dies by going off the bottom of the screen
    if bbox_bottom &gt; room_height {
        room_goto(rm_pause);
        audio_play_sound(snd_gameOver, 1, false);
        highscore_add("Mike", score);
        //create a file, write to the file, close 
        var file = file_text_open_write(working_directory + "\highscore.txt");
        file_text_write_string(file, string(highscore_value(1)));
        file_text_close(file);
    }
    switch(keyboard_key) {
        case(vk_left):
            hspeed = -8;
            sprite_index = spr_mikeLeft; 
            break;
        case(vk_right):
            hspeed = 8;
            sprite_index = spr_mikeRight;
            break;
        default:
            hspeed = 0;
            break;
    }
    /*
    switch(display_get_orientation() = display_portrait) {
        case(sign(device_get_tilt_x() &lt; 0.2)):
            hspeed = -8;
        case(sign(device_get_tilt_x() &gt; 0.2)):
            hspeed = 8;
        default: 
            hspeed = 0;
            break;
    }
    */
    if (display_get_orientation() = display_portrait &amp;&amp; os_android) 
    {
        if(sign(device_get_tilt_x() &lt; 0.2)) 
            hspeed = -8;
        else
            hspeed = 8;
    }
} else {
    gravity = 0;
    if vspeed &gt; 10 {
    //vertical speed top limit
        vspeed = 5;
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
